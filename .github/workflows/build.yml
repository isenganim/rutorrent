name: build

on:
  push:
    branches:
      - main
      - dev
    tags:
      - 'v*'

env:
  DOCKERHUB_SLUG: k44sh/rutorrent
  GHCR_SLUG: ghcr.io/k44sh/rutorrent

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
            ${{ env.GHCR_SLUG }}
          tags: |
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            type=match,pattern=v(.*),group=1
          labels: |
            org.opencontainers.image.title=rTorrent and ruTorrent
            org.opencontainers.image.url=https://github.com/k44sh/rutorrent
            org.opencontainers.image.source=https://github.com/k44sh/rutorrent
            org.opencontainers.image.documentation=https://github.com/k44sh/rutorrent
            org.opencontainers.image.description=rTorrent and ruTorrent Docker image based on Alpine Linux
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.vendor=k44sh
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to DockerHub
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/dev' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GHCR
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/dev' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build Prod
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: docker/build-push-action@v3
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-prod
          push: true
          set: |
            *.cache-from=type=local,src=/tmp/.docker-cache
            *.cache-to=type=local,dest=/tmp/.docker-cache-new,mode=max
      -
        name: Build Dev
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: docker/build-push-action@v3
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-dev
          push: true
          set: |
            *.cache-from=type=local,src=/tmp/.docker-cache
            *.cache-to=type=local,dest=/tmp/.docker-cache-new,mode=max
      -
        name: Build Dev (ARM)
        if:  ${{ github.ref == 'refs/heads/dev' }}
        uses: docker/build-push-action@v3
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: image-dev-arm
          push: true
          set: |
            *.cache-from=type=local,src=/tmp/.docker-cache
            *.cache-to=type=local,dest=/tmp/.docker-cache-new,mode=max
      -
        name: Move cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
      -
        name: Inspect Image
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/dev' }}
        run: |
          docker pull ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.version }}
          docker pull ${{ env.GHCR_SLUG }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ env.GHCR_SLUG }}:${{ steps.meta.outputs.version }}
